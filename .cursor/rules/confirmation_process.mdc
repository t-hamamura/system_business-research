# 確定反映処理ルール（v2.0: タイムスタンプ版管理対応）

## 安全なファイル名変換関数
```python
import re
import unicodedata
import os
import shutil
from datetime import datetime
import json

def safe_filename(text, max_length=80):
    """
    ファイルシステムで安全な名前に変換
    """
    # NFKC正規化（全角→半角変換含む）
    text = unicodedata.normalize('NFKC', text)
    
    # 英数字、ひらがな、カタカナ、漢字、ハイフン、アンダースコアのみ許可
    safe_text = re.sub(r'[^\w\u3040-\u309F\u30A0-\u30FF\u4E00-\u9FAF\-]', '_', text)
    
    # 連続するアンダースコアを1つに
    safe_text = re.sub(r'_+', '_', safe_text)
    
    # 先頭末尾のアンダースコア削除
    safe_text = safe_text.strip('_')
    
    # 長さ制限
    if len(safe_text) > max_length:
        safe_text = safe_text[:max_length]
    
    # 空文字列の場合はデフォルト値
    return safe_text or "unknown"

def safe_confirmation(flow_path, stock_path):
    """
    安全な確定反映（タイムスタンプ版管理）
    """
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    moved_files = []
    
    try:
        # ファイル移動（タイムスタンプ付き）
        for file in os.listdir(flow_path):
            if file.startswith("draft_"):
                base_name = file.replace("draft_", "")
                name, ext = os.path.splitext(base_name)
                new_name = f"{name}_{timestamp}{ext}"
                
                src = os.path.join(flow_path, file)
                dst = os.path.join(stock_path, new_name)
                
                # ディレクトリ作成
                os.makedirs(stock_path, exist_ok=True)
                
                # ファイル移動
                shutil.move(src, dst)
                moved_files.append(new_name)
                
                # 最新版ポインタ更新
                update_latest_pointer(stock_path, new_name)
        
        # Flow フォルダクリーンアップ
        cleanup_empty_folders(flow_path)
        
        return {
            "status": "success",
            "message": f"✅ 確定完了: {stock_path} (タイムスタンプ: {timestamp})",
            "files": moved_files,
            "timestamp": timestamp
        }
    
    except Exception as e:
        return {
            "status": "error",
            "message": f"❌ 確定反映エラー: {str(e)}",
            "files": moved_files,
            "error": str(e)
        }

def update_latest_pointer(folder, latest_file):
    """最新版へのポインタを更新"""
    pointer_file = os.path.join(folder, "_latest.json")
    data = {
        "latest": latest_file,
        "updated_at": datetime.now().isoformat(),
        "previous_versions": []
    }
    
    # 既存の履歴を読み込み
    if os.path.exists(pointer_file):
        try:
            with open(pointer_file, 'r', encoding='utf-8') as f:
                old_data = json.load(f)
                if "latest" in old_data:
                    data["previous_versions"] = [old_data["latest"]] + old_data.get("previous_versions", [])[:9]  # 最大10履歴
        except json.JSONDecodeError:
            pass  # 破損ファイルは無視
    
    try:
        with open(pointer_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"Warning: 最新版ポインタの更新に失敗: {e}")

def cleanup_empty_folders(folder_path):
    """空フォルダのクリーンアップ"""
    try:
        if os.path.exists(folder_path) and not os.listdir(folder_path):
            os.rmdir(folder_path)
            # 親フォルダも空なら削除
            parent = os.path.dirname(folder_path)
            if parent != folder_path and os.path.exists(parent) and not os.listdir(parent):
                os.rmdir(parent)
    except OSError:
        pass  # 削除できない場合は無視
```

## トリガー条件
「確定反映して」「確定版にして」「Stockに移動して」「確定保存して」のいずれかが入力された場合

## 実行手順

### ステップ1: 対象ファイル特定
1. **最新ドラフトファイルの検索**
   - Flow/直近フォルダ内のdraft_*.mdファイルを特定
   - 複数ある場合は最新の作成日時のファイルを対象
   - 対応するJSONファイルも同時に特定

2. **移動対象の確認**
   - ユーザーに移動対象ファイルを表示・確認
   - 例: 「以下のファイルを確定版に移動いたします：
     - draft_market_research.md
     - draft_market_research.json」

### ステップ2: 確定版フォルダ準備（v1.2版）
1. **案件名の抽出**
   - ドラフトファイルのフォルダ名から案件名を取得
   - 例: Flow/line-marketing-tools/market-research/ → "line-marketing-tools"

2. **確定版フォルダの作成**
   ```
   Stock/[案件名]/
   ├── [調査タイプ]/
   │   ├── [調査名].md
   │   └── [調査名].json
   └── README.md
   ```
   - 案件フォルダが存在しない場合は新規作成
   - 調査タイプフォルダの作成
   - README.mdで案件全体を管理

### ステップ3: ファイル移動・リネーム（v1.3版）
1. **ファイル移動の実行**
   - Flow/[案件名]/[調査タイプ]/ から Stock/[案件名]/[調査タイプ]/ へ真の移動
   - フォルダ構造を維持して移動
   - draft_ プレフィックスを削除
   - 移動後、元のFlowファイルは自動削除される

2. **確定版フォルダ構造例**
   ```
   Stock/line-marketing-tools/
   ├── market-research/
   │   ├── market_research.md
   │   └── market_research.json
   ├── competitor-analysis/
   │   ├── competitor_analysis.md
   │   └── competitor_analysis.json
   ├── integrated-research/
   │   ├── integrated_research.md
   │   └── integrated_research.json
   └── README.md                      # 案件全体のサマリー
   ```

### ステップ4: メタデータ更新
1. **ファイル内容の更新**
   - 調査実行日の確認・更新
   - ステータスを「確定版」に変更
   - 確定版移行日時の追記

2. **インデックスファイルの作成**
   - `Stock/[案件名]/README.md`の作成または更新
   - 案件概要、調査履歴、ファイル一覧を記載

### ステップ5: バックアップ・版管理
1. **バックアップの作成**
   - 既存の確定版ファイルがある場合は日付付きでバックアップ
   - 例: `market_research_backup_20250816.md`

2. **履歴管理**
   - 調査履歴をREADME.mdに追記
   - 変更履歴の記録

### ステップ6: Flowクリーンアップ（新規）
1. **移動完了確認**
   - Stock側のファイル存在確認
   - ファイルサイズ・内容の整合性確認
   - 移動失敗時は以降の削除処理を中止

2. **Flowファイル削除**
   - 移動済みdraft_*.mdファイルの削除
   - 移動済みdraft_*.jsonファイルの削除
   - 削除実行前に最終確認

3. **空フォルダクリーンアップ**
   - 調査タイプフォルダが空の場合は削除
   - 案件フォルダが空の場合は削除
   - Flow直下の不要フォルダを整理

4. **クリーンアップ完了確認**
   - 削除ファイル数の確認
   - 削除フォルダ数の確認
   - エラー発生時の適切な報告

### ステップ7: 完了報告（更新版）
```
✅ 確定反映・Flowクリーンアップが完了いたしました

📁 移動先フォルダ:
Stock/[案件名]/[調査タイプ]/

📄 確定版ファイル:
- market_research.md
- market_research.json
- [その他のファイル]

🗑️ Flowクリーンアップ:
- 削除ファイル: X個
- 削除フォルダ: Y個
- Flow容量削減: Z KB

📊 調査サマリー:
- 調査タイプ: [調査種別]
- 実行日: YYYY-MM-DD
- 情報源数: X個
- 品質スコア: XX/100

🔄 今後の作業:
- 追加調査が必要な場合は新たなトリガーキーワードで実行可能
- 確定版ファイルはStock/[案件名]/でアクセス可能
- Flow領域は整理され、新規調査の準備完了
```

## エラー処理

### ドラフトファイルが見つからない場合
```
❌ エラー: 確定反映できるドラフトファイルが見つかりません

以下をご確認ください：
- Flowフォルダ内にdraft_*.mdファイルが存在するか
- 調査が正常に完了しているか

まず調査を実行してからお試しください。
```

### ファイル移動エラーの場合
```
❌ エラー: ファイル移動中にエラーが発生しました

詳細: [エラー詳細]

対処方法：
1. ファイルアクセス権限を確認
2. ディスク容量を確認
3. 再度実行をお試しください
```

### 重複ファイルがある場合
```
⚠️  警告: 確定版フォルダに同名ファイルが既に存在します

対処方法：
1. 既存ファイルをバックアップとして保存
2. 新しいファイルで上書き更新
3. 確定反映を継続

続行しますか？ (Y/N)
```

### Flowクリーンアップエラー（新規）
```
⚠️  警告: Flowクリーンアップで問題が発生しました

【Stock移動失敗時】
- 確定版への移動が不完全です
- Flowファイルの削除は実行されません
- 移動処理を再試行してください

【削除権限エラー】
- ファイル削除権限を確認してください
- 管理者権限で再実行が必要な場合があります
- 手動削除も可能です: Flow/[案件名]/[調査タイプ]/

【部分削除完了】
- 一部ファイルの削除が完了しました
- 残存ファイル: [ファイル一覧]
- 手動確認・削除を推奨します

対処方法：
1. エラー内容を確認
2. 権限・ファイルロックの確認
3. 必要に応じて手動クリーンアップ実行
```

## 確定版フォルダ構造（v1.3版）
```
Stock/[案件名]/
├── README.md                          # 案件全体概要・履歴
├── market-research/                   # 市場調査フォルダ
│   ├── market_research.md
│   └── market_research.json
├── competitor-analysis/               # 競合調査フォルダ
│   ├── competitor_analysis.md
│   └── competitor_analysis.json
├── user-voice-analysis/               # ユーザー調査フォルダ
│   ├── user_voice_analysis.md
│   └── user_voice_analysis.json
├── integrated-research/               # 統合リサーチフォルダ
│   ├── integrated_research.md
│   └── integrated_research.json
└── backups/                          # バックアップフォルダ
    ├── market_research_backup_20250815.md
    └── competitor_analysis_backup_20250810.md
```

## 品質基準
- 処理時間：30秒以内
- 成功率：95%以上
- ファイル整合性：100%保持
- メタデータ完備：必須項目すべて更新
- エラーハンドリング：適切なエラーメッセージ表示